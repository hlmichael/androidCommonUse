1.自定义控件两种方式:
  a.直接新建一个类(MyView)继承一个布局类(Layout)，然后在这个类(一般是构造方法)中new 控件,然后使用addView()将这个控件添加进去,
  然后在布局文件中将这个类的包路径当做标签使用,就把这个控件添加进去了
	
  b.新建一个布局文件,里面放入自己想要的控件(目的就是把这个布局文件当做一个整体),然后新建一个类(MyView)，
  继承一个布局类(Layout),然后在这个类的构造方法中使用LayoutInflater,将开始创建的布局文件,使用inflate方法
  填充进去.在使用findViewById()得到自己在这个布局文件中添加的控件,然后可以给这些控件设置属性,
  这里就不用使用addView()添加了,因为已经用LayoutInflater填充了,最后也是在布局文件中将这个类的包路径当做标签使用,
  就把这个控件添加进去了

2.自定义dialog,新建一个类继承Dialog,然后给dialog设置View，在这个类中的onCreate()方法中通过
setContentView()来设置view，这个view可以是布局文件,也可以是自己建的一个继承自view的类

3.在View中有一个onDraw()方法 可以在view中画东西 通过Paint 用canvas来画,如果需要重新绘制可以调用view的
invalidate()方法，他会重新调用onDraw()方法 

4.用户点两下才退出,覆盖finish()方法:

//记录用户点击了多少次BACK键
private int finishCount = 0;

/*
 * 重写finish()方法 达到用户点一次提醒一下,点两次才退出的效果
*/
@Override
public void finish() {
	finishCount ++;
	//用户点一次
	if(finishCount == 1){
		//提醒用户
		Toast.makeText(this, R.string.finishToast, Toast.LENGTH_SHORT).show();
	}else if(finishCount == 2){
		//用户连续点两次 退出
		super.finish();
	}else{
		super.finish();
	}
}

/*
 * 如果用户误点BACK一下,然后又不想退出  这个时候用户又点了一下屏幕 
* 我们就将finishCount设为0
 */
@Override
public boolean dispatchTouchEvent(MotionEvent ev) {
	//用户在点击BACK一次之后 又想继续使用程序 不退出 我们就将finishCount设为0
	finishCount = 0;
	return super.dispatchTouchEvent(ev);
}

5.代码返回桌面 
Intent MyIntent = new Intent(Intent.ACTION_MAIN); 
MyIntent.addCategory(Intent.CATEGORY_HOME); 
startActivity(MyIntent); 

6.如何让标题栏文字居中 

以下三句代码放到oncreat中即可 
requestWindowFeature(Window.FEATURE_CUSTOM_TITLE); 
setContentView(R.layout.main); 
getWindow().setFeatureInt(Window.FEATURE_CUSTOM_TITLE,R.layout.title); 
注意3句代码的顺序 
主要思想是通过一个XML实现对titile栏的位置控制 
title.xml 
<?xml version="1.0" encoding="utf-8"?> 
<LinearLayout 
xmlns:android="http://schemas.android.com/apk/res/android" 
android:layout_width="wrap_content" 
android:layout_height="wrap_content" android:layout_gravity="center"> 
        <TextView android:id="@+id/text" 
        android:layout_width="wrap_content" 
        android:layout_height="wrap_content" 
        android:text="textTitle" />            
</LinearLayout>

7.android selector 

完全可以实现，这用到了Android的Selector（根据组件的状态显示该状态对应的图片做为显示背景）。    
把下面的XML文件保存成你自己命名的.xml文件（比如list_bg.xml），注意，这个文件相当于一个背景图片选择器，在系统使用时根据ListView中的列表项的状态来使用相应的背景图片，什么情况使用什么图片我在下面都进行了说明。还有，你可以把它看成是一个图片来使用，放于drawable目录下，配置背景属性 
android:background="@drawable/list_bg"就能达到你需要的目的了。 

<?xml version="1.0" encoding="utf-8" ?> 
<selector xmlns:android="http://schemas.android.com/apk/res/android">  
<item android:state_window_focused="false"         android:drawable="@drawable/没有焦点时的图片背景" />   
<item android:state_focused="true" android:state_pressed="true"         
android:drawable="@drawable/非触摸模式下获得焦点并单击时的背景图片" />   <item android:state_focused="false" android:state_pressed="true"         
android:drawable="@drawable/触摸模式下单击时的背景图片" />   
<item android:state_selected="true"         android:drawable="@drawable/选中时的图片背景" />   
<item android:state_focused="true"         android:drawable="@drawable/获得焦点时的图片背景" /> 
</selector> 

8.获得手机信息: 

TelephonyManager tm = (TelephonyManager) getSystemService(Context.TELEPHONY_SERVICE); 



/* 获得可用内存 */ 
ActivityManager am = (ActivityManager) getSystemService(Context.ACTIVITY_SERVICE); 
MemoryInfo info = new MemoryInfo(); 
am.getMemoryInfo(info); 
System.out.println("可用内存为:" + info.availMem); 

/* 获得 Runtime实例 */ 
Runtime runtime = Runtime.getRuntime(); 
/* 获得整个程序的内存总数 */ 
long total = runtime.totalMemory(); 
/* 可用内存总数 */ 
long free = runtime.freeMemory(); 
/* 最大内存量 */ 
long max = runtime.maxMemory(); 
/* 通知系统回收垃圾 */ 
runtime.gc(); 

System.out.println("totalMemory ===== " + total); 
System.out.println("freeMemory ===== " + free); 
System.out.println("maxMemory ===== " + max); 

/* 获得虚拟机 */ 
VMRuntime vmRuntime = VMRuntime.getRuntime(); 
/* 利用虚拟机释放软引用 */ 
vmRuntime.gcSoftReferences(); 
/* 获取最小可用堆内存 */ 
vmRuntime.getMinimumHeapSize();
	


  
